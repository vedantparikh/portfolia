services:
  streamlit:
    build: ./python/streamlit
    ports:
      - 8501:8501
    env_file:
      - .env.docker
    networks:
      - portfolio_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
  app:
    build: ./js
    volumes:
      - ./js/src:/app/src
    ports:
      - 3000:3000
    env_file:
      - .env.docker
    networks:
      - portfolio_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
  api:
    build: 
      context: ./python/api
      dockerfile: Dockerfile
    ports:
      - "${API_PORT}:8000"
    env_file:
      - .env.docker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Development: Mount source code for live reload (exclude cache)
      - ./python/api/app:/app/app:delegated
      - ./python/api/models:/app/models:delegated
      - ./python/api/utils:/app/utils:delegated
      - ./python/api/api:/app/api:delegated
      - ./python/api/alembic:/app/alembic:delegated
      - ./python/api/services:/app/services:delegated
      - ./python/api/start_api.py:/app/start_api.py:delegated
      - ./python/api/start_api.sh:/app/start_api.sh:delegated
      - ./python/api/requirements.txt:/app/requirements.txt:delegated
    networks:
      - portfolio_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
  postgres:
    image: postgres:16.2-alpine
    volumes:
      - portfolio_data:/var/lib/postgresql/data/
    env_file:
      - .env.docker
    ports: 
      - "${POSTGRES_PORT}:5432"
    networks:
      - portfolio_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 5
      
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    env_file:
      - .env.docker
    networks:
      - portfolio_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5

networks:
  portfolio_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  portfolio_data:
  redis_data:
