[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "portfolia-api"
version = "1.0.0"
description = "Portfolio management and trading strategy API"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "fastapi>=0.116.1",
    "uvicorn[standard]>=0.30.1",
    "sqlalchemy>=2.0.31",
    "psycopg2-binary>=2.9.9",
    "alembic>=1.13.1",
    "redis>=5.0.3",
    "polars>=0.20.1",
    "numpy>=2.0.0",
    "pandas>=2.2.2",
    "yfinance>=0.2.65",
    "yahooquery>=2.4.1",
    "requests>=2.32.3",
    "httpx>=0.27.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "pydantic>=2.8.2",
    "pydantic-settings>=2.3.4",
    "email-validator>=2.1.0",
    "python-dotenv>=1.0.1",
    "python-dateutil>=2.9.0.post0",
    "environs>=14.3.0",
    "schedule>=1.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2.2",
    "pytest-asyncio>=0.23.7",
    "pytest-cov>=5.0.0",
    "black>=24.4.2",
    "flake8>=7.1.0",
    "mypy>=1.10.1",
    "pre-commit>=3.7.1",
    "fakeredis>=2.31.0",
]
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.27",
    "mkdocstrings[python]>=0.25.1",
]

[project.urls]
Homepage = "https://github.com/portfolia/portfolia-api"
Documentation = "https://portfolia-api.readthedocs.io/"
Repository = "https://github.com/portfolia/portfolia-api.git"
Issues = "https://github.com/portfolia/portfolia-api/issues"
Changelog = "https://github.com/portfolia/portfolia-api/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*", "api*", "services*", "models*", "utils*"]
exclude = [
    "tests*",
    "docs*",
    "scripts*",
]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    ".eggs",
    "*.egg",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests", "app/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["app", "api", "services", "models", "utils"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Python bytecode generation settings
[tool.setuptools.package-data]
"*" = ["*.py"]

# Environment variables to disable bytecode generation
[tool.setuptools.dynamic]
version = {attr = "app.__version__"}

# Additional configuration to prevent __pycache__ generation
[tool.setuptools]
use_scm_version = false
zip_safe = false

[tool.ruff]
# Target Python 3.8+
target-version = "py38"
line-length = 88
indent-width = 4

# Enable linting rules
[tool.ruff.lint]
# Enable comprehensive rule sets
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # Pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "DJ",   # flake8-django
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "TD",   # flake8-todos
    "FIX",  # flake8-fixme
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # NumPy-specific
    "PERF", # Perflint
    "FURB", # refurb
    "LOG",  # flake8-logging
    "RUF",  # Ruff-specific
]

# Ignore some rules that can be too strict
ignore = [
    "S101",   # Use of assert
    "S603",   # subprocess call with shell=True
    "S607",   # Starting a process with a partial executable path
    "TD002",  # Missing author in TODO
    "TD003",  # Missing issue link on line following TODO
    "FIX002", # Line contains TODO
    "ERA001", # Found commented-out code
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
    "PGH003",  # Use specific rule codes when ignoring type issues
    "COM812",  # Conflicts with formatter
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "__pycache__",
]

[tool.ruff.lint.isort]
known-first-party = ["app"]
force-single-line = false
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 10
max-locals = 20
max-branches = 15

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings.
docstring-code-format = true
# Set the line length limit used when formatting code snippets in docstrings.
docstring-code-line-length = "dynamic"