services:    
  app:
    build: ./js
    volumes:
      - ./js/src:/app/src
    env_file:
      - ./js/.env.docker
    ports:
      - 3000:3000
    depends_on:
      api:
        condition: service_healthy
    networks:
      - portfolio_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
  api:
    build: 
      context: ./python/app
      dockerfile: Dockerfile
    ports:
      - "${API_PORT}:8000"
    env_file:
      - ./python/app/.env.docker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Development: Mount source code for live reload (exclude cache)
      - ./python/app/app:/app/app:delegated
      - ./python/app/schemas:/app/schemas:delegated
      - ./python/app/utils:/app/utils:delegated
      - ./python/app/api:/app/api:delegated
      - ./python/app/alembic:/app/alembic:delegated
      - ./python/app/alembic.ini:/app/alembic.ini:delegated
      - ./python/app/core:/app/core:delegated
      - ./python/app/config.py:/app/config.py:delegated
      - ./python/app/start_api.py:/app/start_api.py:delegated
      - ./python/app/start_api.sh:/app/start_api.sh:delegated
      - ./python/app/requirements.txt:/app/requirements.txt:delegated
      - ./python/app/health_check.py:/app/health_check.py:delegated
    networks:
      - portfolio_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


  postgres:
    build:
      context: ./python/app
      dockerfile: Dockerfile.postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - portfolio_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    build:
      context: ./python/app
      dockerfile: Dockerfile.redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - portfolio_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
  redis_data:

networks:
  portfolio_network:
    driver: bridge
